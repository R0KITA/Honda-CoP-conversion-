// Pin assignments
const int tdcSensorPin = 2;
const int camshaftSensorPin = 3;
const int ignitionSignalPin = 4;  // Replace with your actual ignition signal pin

// Enumeration for states
enum EngineState {
  CALIBRATION,
  NORMAL_OPERATION
};

// Enumeration for coils
enum Coil {
  COIL_1,
  COIL_2,
  COIL_3,
  COIL_4
};

// Variables
volatile int tdcPosition = 0;
volatile int camshaftPosition = 0;
const int camshaftToCrankshaftRatio = 2;
const int camshaftRisingEdgeAngle = 20;
const int camshaftFallingEdgeAngle = 10;

// Variable to track the current engine state
EngineState engineState = CALIBRATION;
int calibrationOffset = 0;  // The offset to set angle to 0 during calibration

// Variable to track the current coil to fire
Coil currentCoil = COIL_1;

void setup() {
  pinMode(tdcSensorPin, INPUT);
  pinMode(camshaftSensorPin, INPUT);
  pinMode(ignitionSignalPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(tdcSensorPin), tdcInterrupt, RISING);
  attachInterrupt(digitalPinToInterrupt(camshaftSensorPin), camshaftInterrupt, CHANGE);

  // Replace the pin numbers with the actual pins connected to each coil
  const int coil1Pin = 5;  // Replace with your actual pin number
  const int coil2Pin = 6;  // Replace with your actual pin number
  const int coil3Pin = 7;  // Replace with your actual pin number
  const int coil4Pin = 8;  // Replace with your actual pin number

  // Set all coil pins to LOW initially
  digitalWrite(coil1Pin, LOW);
  digitalWrite(coil2Pin, LOW);
  digitalWrite(coil3Pin, LOW);
  digitalWrite(coil4Pin, LOW);
}

void loop() {
  switch (engineState) {
    case CALIBRATION:
      // During calibration, wait for the first TDC signal
      if (tdcPosition > 0) {
        // Calibration completed, switch to normal operation
        engineState = NORMAL_OPERATION;
        calibrationOffset = calculateCrankshaftAngle();  // Set the offset to the current angle
      }
      break;

    case NORMAL_OPERATION:
      // In normal operation, proceed with regular tasks
      int crankshaftAngle = calculateCrankshaftAngle() - calibrationOffset;  // Apply the offset
      crankshaftAngle %= 360;

      // Check for ignition signal falling edge
      if (isIgnitionSignalFallingEdge()) {
        // Determine the coil to charge based on the crankshaft angle
        determineCurrentCoil(crankshaftAngle);
        // Charge the coil for the current cylinder (Set to HIGH)
        fireCoil(currentCoil);
      }

      // Check for ignition signal rising edge
      if (isIgnitionSignalRisingEdge()) {
        // Discharge all coils (Set to LOW)
        dischargeAllCoils();
      }

      // Your additional logic or tasks can go here
      break;
  }
}

void tdcInterrupt() {
  tdcPosition = 0;

  // If in calibration state, set the state to normal operation
  if (engineState == CALIBRATION) {
    engineState = NORMAL_OPERATION;
    calibrationOffset = calculateCrankshaftAngle();  // Set the offset to the current angle
  }
}

void camshaftInterrupt() {
  camshaftPosition++;
  int camshaftSignalState = digitalRead(camshaftSensorPin);

  // Use integers instead of floating-point for angle calculations
  int currentAngle = (camshaftSignalState == HIGH) ? camshaftRisingEdgeAngle : camshaftFallingEdgeAngle;
  currentAngle += camshaftPosition * 360;
  currentAngle %= 360;
}

int calculateCrankshaftAngle() {
  // Use integers for calculations
  int crankshaftAngle = (camshaftPosition * (camshaftRisingEdgeAngle + camshaftFallingEdgeAngle) * camshaftToCrankshaftRatio) - tdcPosition;
  crankshaftAngle %= 360;

  return crankshaftAngle;
}

void fireCoil(Coil coil) {
  // Depending on your hardware setup, you may need to use specific commands to activate the coils
  // Below is a placeholder, you should replace it with the actual commands for your hardware

  // Replace the pin numbers with the actual pins connected to each coil
  const int coil1Pin = 5;  // Replace with your actual pin number
  const int coil2Pin = 6;  // Replace with your actual pin number
  const int coil3Pin = 7;  // Replace with your actual pin number
  const int coil4Pin = 8;  // Replace with your actual pin number

  switch (coil) {
    case COIL_1:
      // Charge Coil 1 (Set to HIGH)
      digitalWrite(coil1Pin, HIGH);
      break;
    case COIL_2:
      // Charge Coil 2 (Set to HIGH)
      digitalWrite(coil2Pin, HIGH);
      break;
    case COIL_3:
      // Charge Coil 3 (Set to HIGH)
      digitalWrite(coil3Pin, HIGH);
      break;
    case COIL_4:
      // Charge Coil 4 (Set to HIGH)
      digitalWrite(coil4Pin, HIGH);
      break;
  }
}

void dischargeAllCoils() {
  // Replace the pin numbers with the actual pins connected to each coil
  const int coil1Pin = 5;  // Replace with your actual pin number
  const int coil2Pin = 6;  // Replace with your actual pin number
  const int coil3Pin = 7;  // Replace with your actual pin number
  const int coil4Pin = 8;  // Replace with your actual pin number

  // Discharge all coils (Set to LOW)
  digitalWrite(coil1Pin, LOW);
  digitalWrite(coil2Pin, LOW);
  digitalWrite(coil3Pin, LOW);
  digitalWrite(coil4Pin, LOW);
}

bool isIgnitionSignalRisingEdge() {
  static bool lastIgnitionSignalState = HIGH;  // Assuming HIGH as the default state
  bool currentIgnitionSignalState = digitalRead(ignitionSignalPin);

  // Check for rising edge
  if (lastIgnitionSignalState == LOW && currentIgnitionSignalState == HIGH) {
    // Rising edge detected
    lastIgnitionSignalState = currentIgnitionSignalState;
    return true;
  }

  lastIgnitionSignalState = currentIgnitionSignalState;
  return false;
}

bool isIgnitionSignalFallingEdge() {
  static bool lastIgnitionSignalState = HIGH;  // Assuming HIGH as the default state
  bool currentIgnitionSignalState = digitalRead(ignitionSignalPin);

  // Check for falling edge
  if (lastIgnitionSignalState == HIGH && currentIgnitionSignalState == LOW) {
   
