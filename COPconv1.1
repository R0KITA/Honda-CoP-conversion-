const int CYP_Pin = 2;           // Replace with your actual CYP sensor pin number
const int CKP_Pin = 3;           // Replace with your actual CKP sensor pin number
const int ICM_Pin = 4;           // Replace with your actual ICM signal pin

// Enumeration for states
enum EngineState {
  CALIBRATION,
  NORMAL_OPERATION
};

EngineState engineState = CALIBRATION;

// Constants for coil pins
const int COIL_1 = 5;  // Replace with your actual coil 1 pin number
const int COIL_2 = 6;  // Replace with your actual coil 2 pin number
const int COIL_3 = 7;  // Replace with your actual coil 3 pin number
const int COIL_4 = 8;  // Replace with your actual coil 4 pin number

volatile int camshaftAngle = 0;

void setup() {
  Serial.begin(9600);
  pinMode(CYP_Pin, INPUT);
  pinMode(CKP_Pin, INPUT);
  pinMode(ICM_Pin, INPUT);

  dischargeAllCoils();
  pinMode(COIL_1, OUTPUT);
  pinMode(COIL_2, OUTPUT);
  pinMode(COIL_3, OUTPUT);
  pinMode(COIL_4, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(CYP_Pin), CYP_Interrupt, RISING);
  attachInterrupt(digitalPinToInterrupt(CKP_Pin), CKP_Interrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ICM_Pin), ICM_Interrupt, RISING);
}

void loop() {
  switch (engineState) {
    case CALIBRATION:
      Serial.println("Waiting for CYP signal...");
      break;

    case NORMAL_OPERATION:
      int crankshaftAngle = CALC_CRANK_ANGLE();
      Serial.println("Crankshaft Angle: " + String(crankshaftAngle));

      if (isIgnitionSignalFallingEdge()) {
        int coilToFire = determineCurrentCoil(crankshaftAngle);
        fireCoil(coilToFire);
      }
      break;
  }
}

void CYP_Interrupt() {
  // CYP sensor detected, set the engine state to normal operation
  engineState = NORMAL_OPERATION;
  camshaftAngle = 0; // Reset camshaft angle to 0
  Serial.println("CYP Detected. Switching to Normal Operation.");
}

void CKP_Interrupt() {
  int camshaftSignalState = digitalRead(CKP_Pin);
    // Use integers instead of floating-point for angle calculations
    currentAngle = (camshaftSignalState == HIGH) ? 10 : 5;
	
    
    // Calculate and display the real-time camshaft angle
    camshaftAngle = camshaftAngle + currentAngle;
    camshaftAngle %= 360;
}

void ICM_Interrupt() {
  dischargeAllCoils();
}

void fireCoil(int coil) {
  // Implement your logic to fire the specified coil
  // Replace this with your actual coil firing logic
  switch (coil) {
    case 1:
      digitalWrite(COIL_1, HIGH);
      break;
    case 2:
      digitalWrite(COIL_2, HIGH);
      break;
    case 3:
      digitalWrite(COIL_3, HIGH);
      break;
    case 4:
      digitalWrite(COIL_4, HIGH);
      break;
  }
}

void dischargeAllCoils() {
  // Implement your logic to discharge all coils
  // Replace this with your actual coil discharging logic
  digitalWrite(COIL_1, LOW);
  digitalWrite(COIL_2, LOW);
  digitalWrite(COIL_3, LOW);
  digitalWrite(COIL_4, LOW);
}

int CALC_CRANK_ANGLE() {
  return camshaftAngle * 2;
}

int determineCurrentCoil(int angle) {
  // Implement your logic to determine the current coil based on the crankshaft angle
  int coil = 0;

  // Example logic (replace with your own):
  if ((angle > 630 && angle <= 720) || (angle >= 0 && angle < 90)) {
    coil = 1;
  } else if (angle > 90 && angle < 270) {
    coil = 3;
  } else if (angle > 270 && angle < 450) {
    coil = 4;
  } else if (angle > 450 && angle < 630) {
    coil = 2;
  }

  return coil;
}

bool isIgnitionSignalFallingEdge() {
  static bool lastIgnitionSignalState = HIGH;  // Assuming HIGH as the default state
  bool currentIgnitionSignalState = digitalRead(ICM_Pin);

  // Check for falling edge

  if (lastIgnitionSignalState == HIGH && currentIgnitionSignalState == LOW) {
    // Falling edge detected
    lastIgnitionSignalState = currentIgnitionSignalState;
    return true;
  }
  lastIgnitionSignalState = currentIgnitionSignalState;
  return false;
}
